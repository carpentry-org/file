;;;; Byte reader.

(defmodule File
  (defmodule ByteReader
    (doc read-byte "Read a single byte from a file.")
    (defn read-byte [file]
        (Result.map (IO.fgetc file) &to-byte))

    (doc read-bytes "Read `n` bytes from a file.")
    (defn read-bytes [f n]
      (let-do [bytes (Array.allocate n)
               result (IO.Raw.fread (Array.unsafe-raw &bytes) 1 n @(file f))]
        (if (IO.Raw.feof @(file f))
            (Result.Error @"EOF encountered while reading")
            (if (IO.Raw.ferror @(file f))
                (Result.Error @"Error encountered while reading")
                (Result.Success bytes)))))
    (implements read-from-file read-bytes)

    (doc read 
      "Reads an array of bytes of length n from a file."
      ("This is a convenient wrapper that fixes the return" false)
      "type of File.read to (Array Byte)")
    (sig read (Fn [&File Int] (Result (Array Byte) String)))
    (defn read [file n]
      (File.read file n))
  )
)
